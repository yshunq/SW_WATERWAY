C51 COMPILER V9.00   KEY                                                                   10/11/2024 17:50:15 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN ..\hex\key.obj
COMPILER INVOKED BY: C:\Keil _C51\C51\BIN\C51.EXE ..\common\key.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(..\user;..\displ
                    -ay;..\common;..\cut;..\count) DEBUG OBJECTEXTEND PRINT(.\LIST\key.lst) OBJECT(..\hex\key.obj)

line level    source

   1          #include "key.h"
   2          
   3          KeyState jt_state = WAIT_PRESS; 
   4          //KeyState insertion_state = WAIT_PRESS; 
   5          
   6          u8 read_jtkey(void)
   7          {
   8   1              return JTKEY;
   9   1      }
  10          
  11          u8 read_insertion(void)
  12          {
  13   1              return HANDLE_INSERTION_KEY;
  14   1      }
  15          
  16          u8 read_start_insertion(void)//长按去抖
  17          {
  18   1              return read_insertion();
  19   1      //      static u16 record_time = 0; 
  20   1      //      switch(insertion_state){
  21   1      //              case WAIT_PRESS:
  22   1      //                      if(read_insertion() == 0){
  23   1      //                              record_time = SYSTEM_CC;
  24   1      //                              insertion_state = DEBOUNCE;
  25   1      //                      }
  26   1      //                      break;
  27   1      //              case DEBOUNCE:
  28   1      //                      if((SYSTEM_CC - record_time) > 20){
  29   1      //                              if(read_insertion() == 0){
  30   1      //                                      insertion_state = KEY_PRESSED;
  31   1      //                              }else{
  32   1      //                                      insertion_state = WAIT_PRESS;
  33   1      //                              }
  34   1      //                      }else{
  35   1      //                              if(read_insertion() == 1)insertion_state = WAIT_PRESS;
  36   1      //                      }
  37   1      //                      break;
  38   1      //              case KEY_PRESSED:
  39   1      //                      if(read_insertion() == 0){
  40   1      //                              return 0;
  41   1      //                      }else{
  42   1      //                              insertion_state = WAIT_PRESS;
  43   1      //                      }
  44   1      //                      break;
  45   1      //      }
  46   1      //      return 1;       
  47   1      }
  48          
  49          u8 read_start_jtkey(void)//长按去抖
  50          {
  51   1              static u16 record_time = 0; 
  52   1              switch(jt_state){
  53   2                      case WAIT_PRESS:
  54   2                              if(read_jtkey() == 0){
C51 COMPILER V9.00   KEY                                                                   10/11/2024 17:50:15 PAGE 2   

  55   3                                      record_time = SYSTEM_CC;
  56   3                                      jt_state = DEBOUNCE;
  57   3                              }
  58   2                              break;
  59   2                      case DEBOUNCE:
  60   2                              if((SYSTEM_CC - record_time) > 20){
  61   3                                      if(read_jtkey() == 0){
  62   4                                              jt_state = KEY_PRESSED;
  63   4                                      }else{
  64   4                                              jt_state = WAIT_PRESS;
  65   4                                      }
  66   3                              }else{
  67   3                                      if(read_jtkey() == 1)jt_state = WAIT_PRESS;
  68   3                              }
  69   2                              break;
  70   2                      case KEY_PRESSED:
  71   2                              if(read_jtkey() == 0){
  72   3                                      return 0;
  73   3                              }else{
  74   3                                      jt_state = WAIT_PRESS;
  75   3                              }
  76   2                              break;
  77   2              }
  78   1              return 1;       
  79   1      }
  80          
  81          
  82          
  83          
  84          
  85          
  86          
  87          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    146    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
